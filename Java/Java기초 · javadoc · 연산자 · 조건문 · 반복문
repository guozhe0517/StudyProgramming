01_16 📇

공부 내용 + 수업시간에 작성한 코드 형식으로 정리
package com.hyungmin;

import java.math.BigDecimal;
package는 내 클래스가 저장되는 유일한 주소값. 디렉토리 형식으로 되어있다.

이클립스에서는 보통 자동으로 선언되어있는 상태다.

이름이 같은 객체들끼리 헛갈리지 않기 위해 패키지를 쓴다. 대부분 url자원을 패키지명으로 쓴다.

ex) com.google... com.자기이름

내부 프로젝트 할 때는 이름을 겹치지 않게 하는 것이 좋다.

같은 이름 클래스는 /클래스명 객체이름 = new 패키지명.클래스();/로 불러온다.

Camel Case 표기법 (낙타의 등을 닯았다 하여 붙혀진 이름)

변수병은 소문자로 시작
단어가 바뀌면 단어 첫 글자는 대문자
클래스의 이름은 대문자로 시작
자바는 클래스밖에는 어떤 코드도 없다 클래스 안에 다 들어간다.

public class HelloWorld {
class == 사용자 지정타입이라고도 한다.
static == method area에서 static으로 선언된다. 힙 메모리에 올리지 않아도 사용 가능.
이외의 모든 클래스는 new연산자로 힙메모리에 올려야 사용가능, new 연산자는 객체를 힙 메모리에 올려준다.
public static void main(String[] args) {
		
		HelloWorld Hello = new HelloWorld();
클래스 안에는 entry point가 있어야 한다 (실행시키는 시작점) -> 클래스안의 메인함수
-> public static void main (메인함수)

클래스를 호출하면 시스템에서 자동으로 메인함수를 실행한다.

항상 시작은 메인함수부터다.

아래 다른 클래스를 쓸때는 hellothere there = new hellothere(); 이런 식으로 객체를 생성한다.

args == arguments 약자

Helloworld 내부의 것들은 초기화된 Hellow 객체를 통해 호출할 수 있다.

자바에도 포인터개념이 있다. 포인터를 이름으로 지정할 뿐이다.

Hello가 HelloWorld 변수 메모리를 가리키는 변수 주소 포인터다.

여기서는 Hello가 heap과 method area를 둘 다 가리키고 있다.

코드는 method area, 변수는 heap에 올라간다.

new 연산자는 함수를 만들어 주는 기본 함수다. new를 쓰면 -> public 객체명(){} 이 되는 것과 같다.
클래스를 만들면 클래스명과 동일한 생성자(constructor)를 만들어 쓴다.

public HelloWorld(int a, int b) {} 처럼 생성자를 재정의 할 수 있다.

```
	int r = Hello.sum(1, 2); //덧셈 호출 후 결과값 출력 
	Hello.print(r);		 

	int b = Hello.minus(7, 10); //빼기 호출 후 결과값 출력 
	Hello.print(b); 	
	
	Hello.print(Hello.multiply(3,  10)); //곱하기 호출 후 결과값 출력
	
	int d = Hello.divide(9, 3); //나누기 호출 후 결과값 출력
	Hello.print(d);
	
	Hello.calculate(10000, 3620); // 3620원어치 물건을 사고	10,000원을 지불했을 때 거스름돈 지폐/동전 별 수

    Hello.condition(); //조건문 연습
	
    Hello.loop(); //반복문 연습				

    int i = 0; //continue, break 연습
	int j = 1;
	for(i = 1; i<= 3; i ++) {
		for(j=1; j<=2; j++) {
			if(i<=2) continue;
			System.out.println(i+" "+j);
		}
	System.out.println("end j");
	}
	
	for(i = 1; i<=3; i ++) {
		for(j = 1; j<=2; j++){
			if(i<=2) break;
			System.out.println(i+" "+j);
		}
	}
	System.out.println("end j"); 
	//continue는 아래 로직을 실행시키고 싶지 않을 때 (무시 통과)
//break는 loop탈출

	long bigNumber = 333333333333333333L; //큰 수 처리 연습(BigDecimal 클래스 활용)
	BigDecimal result = Hello.sumBig(bigNumber);
	System.out.println(result.toString());
}

```
//1부터 int범위를 벗어나는 큰 수까지의 합 구하기

  public BigDecimal sumBig(long max) {
  	
  	BigDecimal result = new BigDecimal(0);
  	BigDecimal bigMax = new BigDecimal(max);
  	
  	result = result.add(bigMax);
  	result = result.add(new BigDecimal(1));
  	
  	result = result.multiply(bigMax);
  	result = result.divide(new BigDecimal(2));
  	
  	return result;
//위의 코드와 동일한 기능
    BigDecimal result = null;
    BigDecimal result = new BigDecimal(0);
    long count = 1;
		for(count = 1; count <= max; count++) {
			BigDecimal current = new BigDecimal(count);
			result = result.add(current); //내부함수 add를 통해서 count를 bigdecimal형태로 변환해서 넣는다. 
                                   //위의 2줄과 동일 result.add(new.BigDecimal(count));
      }
		return result; 
	}	
BigDecimal result = null; //기본형 빼곤 다 객체, 객체의 초기화는 null을 사용한다.
BigDecimal result = new BigDecimal(0); //객체에 값을 집어넣을 때는 이렇게 한다.
return은 호출 쪽에서 값을 꺼낼 수 있다는 뜻이다.
##1. JavaDoc 사용법

	// 한 줄 주석
	
	/*
	 여러줄 주석
	 */
	
	/** 설명 : 값을 콘솔에 출력하는 함수
	 * @author 노형민
	 * @version 1.0
	 * @param value - 정수형 입력값
	 */
	
java project -> export -> generate javadoc
##2. 연산자

	public void print(int value) {
		System.out.println(value);
	}
public == 접근제어자, 퍼블릭은 다른 클래스에서 마음대로 사용할 수 있다.
접근제어자가 빠진 경우, default라는 접근제어자가 자동으로 설정된다.
	/** 입력값 a, b를 더해서 리턴
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	public int sum(int a, int b) {
		
		return a + b;
		
	}
int == return 타입, void는 리턴타입이 없을 때 쓴다. 프린트는 콘솔에 출력하고 끝나기 때문에 리턴값이 없다.
sum == 함수명
int a, b == parameter, 파라미터를 이용한 연산 값을 호출한 쪽으로 돌려주는 것이다.
똑같은 걸 호출 측에서는 argument라고 한다.
	public int minus(int a, int b) {
		
		int result = 0;
		//메모리 활용과 관련해서 변수는 꼭 초기화를 해주는 것이 좋다.
		
		result = a - b;
		
		return result;
		
	}
	
	public int multiply(int a, int b) {
		
		return a * b; 
		
	}
	
	public int divide(int a, int b) {
		
		return a/b;
	}
	

	/**
	 * 지불한 금액 paid에서 실제 가격 cost 빼고 남은 거스름돈의  개수를 출력하세요.
	 * 
	 * - 제약조건 
	 * paid = 10,000원
	 * cost = 3,720원
	 * 
	 * @param paid
	 * @param cost
	 */
	
	public void calculate(int paid, int cost) {
		
		int change = paid - cost;
		
		int f = change/5000;
		
		int change2 = change - (5000*f);
		
		int t = change2/1000;
		
		int change3 = change2 - 1000*t;
		
		int f2 = change3/500;
		
		int change4 = change3 - 500*f2;
		
		int o = change4/100;
		
		int change5 = change4 - 100*o;
		
		int t2 = change5/10;
		
		
		System.out.println("오천원:" + f + "개");
		System.out.println("천원:" + t + "개");
		System.out.println("오백원:" + f2 + "개");
		System.out.println("백원:" + o + "개");
		System.out.println("십원:" + t2 + "개");
		
	}
	
	public static void sumFromTo(int from, int to) {
		//from부터 to까지 더한 값
		int s = from;
		int t = to;
		int sum = 0;

		sum = ((s+t)*((t-s)+1))/2 ;
		System.out.println(sum);
		
	}
##3. 조건문

if 조건문 == 비교 결과가 거짓인지를 판단하여 해당 블럭 내에 있는 로직을 실행한다.
switch == 입력된 값과 어떤 특정값을 비교하여 해당 블럭 내에 있는 로직을 실행한다.

	public void condition() {
		
		int a = 15;
		int b = 20;
		int c = 15;
		
		if(a>b) {
			System.out.println("a는 b보다 큽니다.");
		}
		else if( a == b ) {
			System.out.println("a는 b와 같습니다");
		}
		else {
			System.out.println("a는 b보다 작습니다.");
		}
		//case는 if문의 ==과 같은 역할을 한다 
		//특정값은 switch, 구간값은 if		

    switch( a ) {
		case 10 :
			System.out.println("a는 1입니다");
			break;
		case 15 :
			System.out.println("a는 15입니다");
			break;
		case 20 : 
			System.out.println("a는 20입니다");
			break;
		default :
			System.out.println("a는" + a + "입니다");
			break;
		}
	
		//3항 연산자, if - else 문의 축약형 
		c = (a==15)? 100:0;
    (조건식) ? a : b ;  
    true 면 a 리턴  
    false 면 b 리턴 
	}

##4. 반복문

for
특정 범위 내의 값만큼 반복하면서 블럭 내의 로직을 실행한다.

while
특정 조건이 만족될 때 블럭 내의 로직을 실행한다. (if 반복문)

	
	
	public void loop() {
  
		//시작값; 종료값; 증감값
		//변수를 블럭 안에서 설정하는 것은 트렌드가 아니다. 가독성을 위해 밖에다 선언을 하고 주석을 단다.
    
		int i; // 반복문의 시작값
		int limit = 10; //반복문이 종료되는 값
		
    //증감먼저하고 조건 비교하고 로직을 실행한다.
    //증감연산자는 요즘엔 안쓰는 추세, 가독성에 문제가 있다  a++; -> a=a+1;

    for (i = 0; i<limit; i++) {
			System.out.println("i1=" + i);
		}
		
		i=0; //뒤의 while문이 돌아가게 만들기 위해서 변수 초기화 
		
		while(i < limit) {
			System.out.println("i2=" + i);
			i = i + 1;
		}
		
		int a = 0 ; //시작값
		int a_limit = 10; //종료값
		
		int b = 0 ; //내부 for 문 시작값
		int b_limit = 10; //내부 for문 종료값
		for(a=0; a<a_limit; a++) {
			for(b = 0; b<b_limit; b++) {
				System.out.println("a=" + a + " " + "b=" + b);
			}
		}
		
	}
  
	//static과 void == static 은 객체호출을 하지 않고 바로 사용 void는 객체를 호출해 접근  //public static void gugudan...
  
	public void gugudan(int n) {
		int i, j;
		int result = 0;
		for(i=1; i<=n; i++) {
			for(j=1; j<=9; j++) {
				result = i*j;
				System.out.println(i + "X" + j + "=" + result);
			}
		}
		
	}	
}
##5. 그 외 정리

텍스트 커맨드창 == 콘솔

절차형 함수에서는 직접 함수 호출 가능하지만 객체지향은 클래스를 호출해야 그 안의 함수를 이용할 수 있다.
ex)print 함수 == System.out 클래스 아래 있어서 같이 써줘야 함

중괄호가 나오면 그 전에 한칸 띄워야 한다.
새로운 블럭 안의 내용이 나올 때 들여쓰기를 꼭 해야 한다.
들여쓰기 규칙 == 공백4개, tab
공백만 쓸거면 다 공백, 탭만 쓸거면 다 탭 써야함. 파이썬 같은 언어는 컴파일 오류난다.

자바같은 객체지향 언어들은 함수 안에서 로직이 만들어져야 한다.
변수는 함수 밖에서 선언가능 하다. 로직줄이 바뀔 때는 항상 ;으로 종료
로직 == 계산이 일어나는 부분, 동작이 생기는 부분

자바는 vm환경에서 동작하기 때문에 vm 전에 class 파일로 pre-compile한다.
그리고 실행되면 vm에서 os에 맞게 기계어로 다시 컴파일한다.
자바언어 -> 바이트코드 -> 기계어 두 번의 컴파일 과정을 가진다.

AOT (Ahead of time) == 클래스 파일 설치 시 최초 한 번 기계어로 컴파일 한다.
속도 저하는 없지만 안드로이드처럼 설치가 명확한 구조에서만 가능하다.
(ex 앱 설치 시)
컴파일 파일 보관하느라 저장공간 소요된다.
JIT (just in time) == 클래스 파일 호출 시 기계어로 컴파일 한다. 최초 한 번은 속도저하가 발생할 수 있다.
(ex 앱 설치후 실행시)
저장공간 프로그램 실행시 늘어났다 종료되면 줄어든다, 컴파일 파일을 썼다가 다시 지우기 때문이다.

안드로이드의 경우 두가지 모두 쓰이고 os가 판단해서 알아서 컴파일 한다. 개발자 판단x

컴파일 하면 바이너리 파일로 바뀌는데 바이너리 파일은 종류를 구분하기 위해
레이아웃, 매직넘버를 가진다. ex) class file 은 cafe babe

java의 실행과정

자바 프리 컴파일 -> HelloWorld class -> 클래스 로더가 클래스를 로드 ->
작성한 코드들은 method area(code area)에 들어간다 ->
실행을 하면(실행을 한다는 것은 그 파일이 heap에 올라간다는 것, 변수를 만든다는 건 메모리 공간을 지정한다는 것)
-> javastack(메모리)에 저장됨 (garbage collector는 heap에만 관여)

Heap Area (인스턴스를 위한 영역)
• 인스턴스가 생성되는 메모리공간

• JVM에 의한 메모리 공간의 인스턴스 정리 (Garbage Collection)이 이루어 지는 공간

• 인스턴스의 할당은 프로그래머가, 소멸은 JVM이 담당

• Garbage Collection의 탐색 효율성을 위해 Heap Area에 인스턴스를 할당

정리 기준 : 참조변수에 의한 참조가 이루어지지 않는 인스턴스

자바/안드로이드는 별개 == 안드로이드는 자바의 syntax만 차용해서 쓴 새로운 환경

객체지향에서 가장 중요한 건 네이밍 (알아보기 쉽게)

IDE 툴은 전체적인 걸 다 하는 도구 - 이클립스
툴은 특정 기능 - 포토샵은 그래픽 툴

ctr - shift - i == 들여쓰기 단축기

. 은 접근연산자다. Instance에 접근한다는 의미다.

생성자(Constructor)

• 인스턴스를 생성할 때 객체를 초기화를 할 수 있는 기능

• 인스턴스 생성 과정의 일부로써 자동으로 클래스와 똑같은 이름을 가진 생성자가 먼저 실행되도록 약속되어 있다.

• 생성자를 코드상에 구현하지 않아도 default 생성자가 호출이 자동으로 된다,

• 생성자 재정의 가능

문장의 끝에는 ;을 붙여야 한다. 단 블럭의 시작줄인 { 전에는 붙이지 않는다.
연속된 빈공간은 하나의 공간으로 인식된다.

식별자 == 변수명;
대소문자 구분, 첫 글자에 숫자는 안됨, 자바에서 미리 정의되어 있는 키워드는 사용불가

변수는 자료형 = 값; 의 형태, 다른 값 입력 가능
변수명 앞에 final을 붙여서 정의하고 한 번 입력된 값은 변경될 수 없다.

new Class(); //Class의 인스턴스를 생성하면서 Class() 생성자를 호출하겠다라는 중복된 표현

기본 자료형(primitive type)

기본 자료형은 변수 공간이 특정될 수 있어야 한다.
논리형 boolean
문자형 char
정수형 int byte short long (기본은 int)
실수형 float double (기본은 double) 문자형2 string
문자형 data타입의 적용
char는 2바이트를 사용하여 문자를 처리하는 방식. 한글이든 영어든 한 글자.
String은 쌍 따옴표를 사용한다. 스트링은 내부적으로 char의 배열을 가진 형태의 객체이다.
char는 '' String은 ""
String Class

• 문자열을 표현하기 위해서 Java에서 표준으로 정의한 Class

• 문자열을 사용할 경우에 자동으로 String이라는 class의 instance화 되어 처리된다.

• "문자열"을 표현하면 Java는 문자열을 저장하는 하나의 String형 Instance를 생성하고 Instance의 주소값을 반환해준다.

소수점 연산 오류 원인
컴퓨터는 기본적으로 소수점 0.1을 표현불가능
0과 1의 정수만 표현가능한데 소수점 표현을 위해 지수부와 가수부를 구분해서 표시
가수부에 할당된 자릿수가 정해져있기 때문에 오차발생

국제 코딩표준에서는 정확한 수치연산의 경우 부동소수점 연산을 하지 못하도록 규정하고 있다.

double x == double y 는 잘못된 경우

Double.compare(x,y) == 0 는 옳은 경우

부동소수점 연산은 Double 클래스 안의 함수들을 사용하자.

자료형 변환
숫자를 문자로 변경

int num = 2016;
String str = Strin.valueOf(num);
String str2 = num + "";
문자를 숫자로 변경

integer.parseint(str);
파싱 함수 사용(종류 여러가지)
not 연산자 !!와 같이 연속된 형태로 사용될 수 있다.

보통 빨간색, 파란색 == 예약어
class HelloWorld
예약어 / 클래스이름
